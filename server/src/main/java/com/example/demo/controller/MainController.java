package com.example.demo.controller;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.BakingItem;
import com.example.demo.entity.Ingredient;
import com.example.demo.entity.Registry;
import com.example.demo.repository.BakingItemRepository;
import com.example.demo.repository.IngredientRepository;
import com.example.demo.repository.RegistryRepository;

@RestController
@RequestMapping("/api")
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RegistryRepository registryRepository;

    @Autowired
    private BakingItemRepository bakingItemRepository;

    @Autowired
    private IngredientRepository ingredientRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewRegistry(@RequestParam String name, @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Registry n = new Registry();
        n.setName(name);
        n.setEmail(email);
        registryRepository.save(n);
        return "Saved";
    }

    @PostMapping(path = "/add-baking-item") // Map ONLY POST Requests
    public @ResponseBody String addNewBakingItem(@RequestParam String name) {

        BakingItem bakingItem = new BakingItem();
        bakingItem.setName(name);

        // Create Ingredients and associate them with the BakingItem
        Ingredient ingredient1 = new Ingredient();
        ingredient1.setName("Ingredient 1");
        ingredient1.setBakingItem(bakingItem);

        Ingredient ingredient2 = new Ingredient();
        ingredient2.setName("Ingredient 2");
        ingredient2.setBakingItem(bakingItem);

        Ingredient ingredient3 = new Ingredient();
        ingredient3.setName("Ingredient 3");
        ingredient3.setBakingItem(bakingItem);

        // Set the Ingredients on the BakingItem
        bakingItem.setIngredients(Arrays.asList(ingredient1, ingredient2, ingredient3));

        // Save the BakingItem
        bakingItemRepository.save(bakingItem);
        return "Saved";
    }

    @GetMapping(path = "/baking-items")
    public @ResponseBody Iterable<BakingItem> getAllBakingItems() {
        // This returns a JSON or XML with the Registrys
        return bakingItemRepository.findAll();
    }

    @GetMapping(path = "/ingredients")
    public @ResponseBody Iterable<Ingredient> getAllIngredients() {
        // This returns a JSON or XML with the Registrys
        return ingredientRepository.findAll();
    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<Registry> getAllRegistrys() {
        // This returns a JSON or XML with the Registrys
        return registryRepository.findAll();
    }
}